nid: 30
kd: ND_PKG
items:
  nid: 0
  kd: ND_USE
  vis: VIS_PRIV
    kd: USE_SIMPLE
    prefix: std::file::File
  nid: 1
  kd: ND_USE
  vis: VIS_PRIV
    kd: USE_MACRO
    prefix: std
    macro: println!
  nid: 2
  kd: ND_USE
  vis: VIS_PRIV
    kd: USE_NESTED
    prefix: std::vec
    nested len: 2
    nested:
      kd: USE_SIMPLE
      prefix: Vec
      kd: USE_MACRO
      macro: vec!
  nid: 3
  kd: ND_USE
  vis: VIS_PRIV
    kd: USE_SIMPLE
    prefix: super::Foo
  nid: 4
  kd: ND_USE
  vis: VIS_PUB
    kd: USE_NESTED
    prefix: a::b
    nested len: 2
    nested:
      kd: USE_SIMPLE
      prefix: self
      kd: USE_NESTED
      prefix: c
      nested len: 2
      nested:
        kd: USE_SIMPLE
        prefix: d
        kd: USE_MACRO
        macro: e!
  nid: 5
  kd: ND_USE
  vis: VIS_PRIV
    kd: USE_NESTED
    prefix: a::b
    nested len: 3
    nested:
      kd: USE_SIMPLE
      prefix: self
      alias: ab
      kd: USE_SIMPLE
      prefix: c
      alias: abc
      kd: USE_MACRO
      macro: m!
      alias: abm!
  nid: 7
  kd: ND_FN
  vis: VIS_PUB
  ident: max
  vis: VIS_PUB
  sig: u8 -> u8 -> u8
  params len: 2
    pat:
      kd: PAT_EXPR
      expr:
        kd: EXPR_PATH
        path: a
    ty: u8
    pat:
      kd: PAT_EXPR
      expr:
        kd: EXPR_PATH
        path: b
    ty: u8
  body:
    items:
      nid: 6
      kd: ND_RETURN
      expr:
        kd: EXPR_IF
        cond:
          kd: EXPR_BINARY
          op: OP_GT
          lexpr:
            kd: EXPR_PATH
            path: a
          rexpr:
            kd: EXPR_PATH
            path: b
        on_true:
          kd: EXPR_PATH
          path: a
        on_false:
          kd: EXPR_PATH
          path: b
  nid: 29
  kd: ND_FN
  vis: VIS_PRIV
  ident: main
  vis: VIS_PRIV
  sig: nil -> nil
  params len: 0
  body:
    items:
      nid: 8
      kd: ND_STATIC
      vis: VIS_PRIV
      ident: a
      ty: i8
      init:
        kd: EXPR_LIT
        lit:
          kd: LIT_INT
          size: 0, is_signed: 0, v: 10
      nid: 9
      kd: ND_CONST
      vis: VIS_PRIV
      ident: i
      ty: _
      init:
        kd: EXPR_LIT
        lit:
          kd: LIT_INT
          size: 8, is_signed: 0, v: 1
      nid: 10
      kd: ND_CONST
      vis: VIS_PRIV
      ident: j
      ty: _
      init:
        kd: EXPR_LIT
        lit:
          kd: LIT_INT
          size: 8, is_signed: 0, v: 2
      nid: 11
      kd: ND_CONST
      vis: VIS_PRIV
      ident: k
      ty: _
      init:
        kd: EXPR_BINARY
        op: OP_ADD
        lexpr:
          kd: EXPR_CALL
          fn:
            kd: EXPR_PATH
            path: max
          args len: 2
          args:
            kd: EXPR_PATH
            path: i
            kd: EXPR_PATH
            path: j
        rexpr:
          kd: EXPR_BINARY
          op: OP_MUL
          lexpr:
            kd: EXPR_LIT
            lit:
              kd: LIT_INT
              size: 0, is_signed: 0, v: 3
          rexpr:
            kd: EXPR_LIT
            lit:
              kd: LIT_INT
              size: 0, is_signed: 0, v: 4
      nid: 18
      kd: ND_FN
      vis: VIS_PRIV
      ident: fibnacci
      vis: VIS_PRIV
      sig: u8 -> u8
      params len: 1
        pat:
          kd: PAT_EXPR
          expr:
            kd: EXPR_PATH
            path: i
        ty: u8
      body:
        items:
          nid: 13
          kd: ND_IF
          cond:
            kd: EXPR_BINARY
            op: OP_EQ
            lexpr:
              kd: EXPR_PATH
              path: i
            rexpr:
              kd: EXPR_LIT
              lit:
                kd: LIT_INT
                size: 0, is_signed: 0, v: 0
          block:
            items:
              nid: 12
              kd: ND_RETURN
              expr:
                kd: EXPR_LIT
                lit:
                  kd: LIT_INT
                  size: 0, is_signed: 0, v: 0
          next_if:
            nid: 15
            kd: ND_IF
            cond:
              kd: EXPR_BINARY
              op: OP_EQ
              lexpr:
                kd: EXPR_PATH
                path: i
              rexpr:
                kd: EXPR_LIT
                lit:
                  kd: LIT_INT
                  size: 0, is_signed: 0, v: 1
            block:
              items:
                nid: 14
                kd: ND_RETURN
                expr:
                  kd: EXPR_LIT
                  lit:
                    kd: LIT_INT
                    size: 0, is_signed: 0, v: 1
            next_if:
              nid: 17
              kd: ND_IF
              cond: else
              block:
                items:
                  nid: 16
                  kd: ND_RETURN
                  expr:
                    kd: EXPR_BINARY
                    op: OP_ADD
                    lexpr:
                      kd: EXPR_CALL
                      fn:
                        kd: EXPR_PATH
                        path: fibnacci
                      args len: 1
                      args:
                        kd: EXPR_BINARY
                        op: OP_SUB
                        lexpr:
                          kd: EXPR_PATH
                          path: i
                        rexpr:
                          kd: EXPR_LIT
                          lit:
                            kd: LIT_INT
                            size: 0, is_signed: 0, v: 1
                    rexpr:
                      kd: EXPR_CALL
                      fn:
                        kd: EXPR_PATH
                        path: fibnacci
                      args len: 1
                      args:
                        kd: EXPR_BINARY
                        op: OP_SUB
                        lexpr:
                          kd: EXPR_PATH
                          path: i
                        rexpr:
                          kd: EXPR_LIT
                          lit:
                            kd: LIT_INT
                            size: 0, is_signed: 0, v: 2
      nid: 22
      kd: ND_MATCH
      cond:
        kd: EXPR_CALL
        fn:
          kd: EXPR_PATH
          path: fibnacci
        args len: 1
        args:
          kd: EXPR_PATH
          path: k
      arms len: 3
      arms:
        kd: ARM_MATCH
        pat:
          kd: PAT_EXPR
          expr:
            kd: EXPR_LIT
            lit:
              kd: LIT_INT
              size: 0, is_signed: 0, v: 0
        body:
          nid: 19
          kd: ND_EXPR
          expr:
            kd: EXPR_CALL
            fn:
              kd: EXPR_PATH
              path: print
            args len: 1
            args:
              kd: EXPR_LIT
              lit:
                kd: LIT_STR
                len: 1, v: 0
        kd: ARM_MATCH
        pat:
          kd: PAT_EXPR
          expr:
            kd: EXPR_LIT
            lit:
              kd: LIT_INT
              size: 0, is_signed: 0, v: 1
        body:
          nid: 20
          kd: ND_EXPR
          expr:
            kd: EXPR_CALL
            fn:
              kd: EXPR_PATH
              path: print
            args len: 1
            args:
              kd: EXPR_LIT
              lit:
                kd: LIT_STR
                len: 1, v: 1
        kd: ARM_MATCH
        pat:
          kd: PAT_WILD
        body:
          nid: 21
          kd: ND_EXPR
          expr:
            kd: EXPR_CALL
            fn:
              kd: EXPR_PATH
              path: print
            args len: 1
            args:
              kd: EXPR_LIT
              lit:
                kd: LIT_STR
                len: 2, v: >1
      nid: 24
      kd: ND_FOR
      pat:
        kd: PAT_EXPR
        expr:
          kd: EXPR_PATH
          path: i
      expr:
        kd: EXPR_RANGE
        start:
          kd: EXPR_LIT
          lit:
            kd: LIT_INT
            size: 0, is_signed: 0, v: 0
        end:
          kd: EXPR_PATH
          path: a
      block:
        items:
          nid: 23
          kd: ND_EXPR
          expr:
            kd: EXPR_CALL
            fn:
              kd: EXPR_PATH
              path: print
            args len: 1
            args:
              kd: EXPR_PATH
              path: i
      nid: 28
      kd: ND_LOOP
      block:
        items:
          nid: 26
          kd: ND_IF
          cond:
            kd: EXPR_BINARY
            op: OP_GT
            lexpr:
              kd: EXPR_PATH
              path: a
            rexpr:
              kd: EXPR_LIT
              lit:
                kd: LIT_INT
                size: 0, is_signed: 0, v: 100
          block:
            items:
              nid: 25
              kd: ND_BREAK
          nid: 27
          kd: ND_ASSIGN
          op: OP_MUL_ASSIGN
          lexpr:
            kd: EXPR_PATH
            path: a
          rexpr:
            kd: EXPR_LIT
            lit:
              kd: LIT_INT
              size: 0, is_signed: 0, v: 2
